Unit Test 1 - getWinners()
----------------------------------------------

Test #1: Correct single winner for all variations of number of players 
----------------------------------------------
Test FAILED with 2 players and player 1 supposed to win.
Test FAILED with 3 players and player 1 supposed to win.
Test FAILED with 3 players and player 2 supposed to win.
Test FAILED with 3 players and player 3 supposed to win.
Test FAILED with 4 players and player 1 supposed to win.
Test FAILED with 4 players and player 2 supposed to win.
Test FAILED with 4 players and player 3 supposed to win.
Test FAILED with 4 players and player 4 supposed to win.
Test #1 has FAILED

Test #2: Correct winners when multiple winners 
----------------------------------------------
Test FAILED with 2 players and every player except 1 supposed to win.
Test FAILED with 2 players and every player except 2 supposed to win.
Test FAILED with 3 players and every player except 1 supposed to win.
Test FAILED with 3 players and every player except 2 supposed to win.
Test FAILED with 3 players and every player except 3 supposed to win.
Test FAILED with 4 players and every player except 1 supposed to win.
Test FAILED with 4 players and every player except 2 supposed to win.
Test FAILED with 4 players and every player except 3 supposed to win.
Test FAILED with 4 players and every player except 4 supposed to win.
Test #2 has FAILED

Test #3: Correct winner when a tie score happens with one player having less turns 
----------------------------------------------
Test #3 has FAILED


TEST RESULTS: 0/3 tests passed successfully

Unit Test 2 - scoreFor()
----------------------------------------------

Test #1: Correct score with cards in hand only 
----------------------------------------------
Expected score: 10  Actual score: 10

Test #1 was SUCCESSFUL

Test #2: Correct score with cards in discard only 
----------------------------------------------
Expected score: 10  Actual score: 20

Test #2 has FAILED

Test #3: Correct score with cards in deck only 
----------------------------------------------
Expected score: 10  Actual score: 0

Test #3 has FAILED

Test #4: Correct score with cards in all three piles 
----------------------------------------------
Expected score: 31  Actual score: 30

Test #4 has FAILED

Test #5: Correct score with no cards 
----------------------------------------------
Expected score: 0  Actual score: 0

Test #5 was SUCCESSFUL

Test #6: Test gardens scoring. 2 garden cards among 30 total cards spread over all piles 
----------------------------------------------
Expected score: 6  Actual score: 0

Test #6 has FAILED

Test #7: Test two players' scores from same game state 
----------------------------------------------
Expected score: First player > Second Player  Actual score: 54 > 9

Test #7 was SUCCESSFUL


TEST RESULTS: 3/7 tests passed successfully

Unit Test 3 - gainCard()
----------------------------------------------

Test #1: Returns -1 for all cards when supplyCounts are all 0 
----------------------------------------------
Test #1 was SUCCESSFUL

Test #2: Add one of every card to player deck 
----------------------------------------------
Test #2 was SUCCESSFUL

Test #3: Check hand and discard counts remain unchanged 
----------------------------------------------
Expected hand count: 0  Actual hand count: 0
Expected discard count: 0  Actual discard count: 0
Test #3 was SUCCESSFUL

Tests #4 & 5: Add one of each card to the remaining two piles (test 4 discard, test 5 hand) 
----------------------------------------------
Test #4 was SUCCESSFUL

Test #5 was SUCCESSFUL

Test #6: Check deck count remains unchanged after add 
----------------------------------------------
Expected deck count: 10  Actual deck count: 10
Test #6 was SUCCESSFUL

Test #7: Check all card supplies were incremented back to 0 
----------------------------------------------
Test #7 was SUCCESSFUL

Test #8: Check that calling gainCard on cards not in the game fails 
----------------------------------------------
Test #8 was SUCCESSFUL


TEST RESULTS: 8/8 tests passed successfully

Unit Test 4 - endTurn()
----------------------------------------------

Test #1: Turn incremented to next player after each call 
----------------------------------------------
Test #1 was SUCCESSFUL

Test #2: Cards removed from hand 
----------------------------------------------
Test #2 was SUCCESSFUL

Test #3: Correct cards added to discard pile 
----------------------------------------------
Test #3 was SUCCESSFUL

Test #4: Discard count incremented properly 
----------------------------------------------
Test #4 was SUCCESSFUL

Test #5: Deck unchanged 
----------------------------------------------
Test #5 was SUCCESSFUL

Test #6: Next player draws correct number cards 
----------------------------------------------
Test #6 was SUCCESSFUL


TEST RESULTS: 6/6 tests passed successfully

Card Test 1 - smithy
----------------------------------------------

Test 2 instance failure: Player 1 deck was not decremented by 3.
Test 1 instance failure: Player 1 hand did not increase by 2 (3 drawn, 1 discard)
Test 2 instance failure: Player 2 deck was not decremented by 3.
Test 1 instance failure: Player 2 hand did not increase by 2 (3 drawn, 1 discard)
Test 2 instance failure: Player 3 deck was not decremented by 3.
Test 1 instance failure: Player 3 hand did not increase by 2 (3 drawn, 1 discard)
Test 2 instance failure: Player 4 deck was not decremented by 3.
Test 1 instance failure: Player 4 hand did not increase by 2 (3 drawn, 1 discard)

Test #1: Player receives 3 cards, discards 1 
----------------------------------------------
Test #1 has FAILED

Test #2: All cards drawn by a player came from their own deck 
----------------------------------------------
Test #2 has FAILED

Test #3: All other players' states remain unchanged 
----------------------------------------------
Test #3 was SUCCESSFUL

Test #4: None of the kingdom or victory card piles were affected. 
----------------------------------------------
Test #4 was SUCCESSFUL


TEST RESULTS: 2/4 tests passed successfully

Test #1: Last two cards in hand of player are treasure cards 
----------------------------------------------
Test #1 was SUCCESSFUL

Test #2: Treasure cards in hand of player equal to the first two in their deck previously.
-----------------------------------------------
Test #2 has FAILED

Test #3: None of the new cards in the discard pile are treasure cards.
-----------------------------------------------
Test #3 was SUCCESSFUL

Test #4: State of other player remains unchanged.
----------------------------------------------
Test #4 was SUCCESSFUL

Test #5: No cards drawn from kingdom or victory piles.
----------------------------------------------
Test #5 was SUCCESSFUL


TEST RESULTS: 4/5 tests passed successfully

Card Test 3 - remodel
----------------------------------------------

Test #1: Trying to trash the remodel card should return a value of -1 (for error)
----------------------------------------------
Test #1 was SUCCESSFUL

Test #2: Ineligible card (value > 2 of trashed card) is rejected
----------------------------------------------
Test #2 has FAILED

Test #3: Eligible card (card within value of 2) is added to discard 
----------------------------------------------
Test #3 was SUCCESSFUL

Test #4: Correct supply pile decrements correctly by 1
----------------------------------------------
Test #4 was SUCCESSFUL

Test #5: Card is taken from supply, therefore player deck is unchanged
----------------------------------------------
Test #5 was SUCCESSFUL

Test #6: Hand count decreases by 2 (Removed remodel and trash card) 
----------------------------------------------
Test #6 was SUCCESSFUL


TEST RESULTS: 5/6 tests passed successfully

Card Test 4 - village
----------------------------------------------

Test 6 instance failure: The last card in player 1's hand does not match the first card that was on their deck
Test 6 instance failure: The last card in player 2's hand does not match the first card that was on their deck
Test 6 instance failure: The last card in player 3's hand does not match the first card that was on their deck
Test 6 instance failure: The last card in player 4's hand does not match the first card that was on their deck

Test #1: Player receives 1 card, discards 1 
----------------------------------------------
Test #1 was SUCCESSFUL

Test #2: All cards drawn by a player came from their own deck 
----------------------------------------------
Test #2 was SUCCESSFUL

Test #3: Player's actions have increased by 2 
----------------------------------------------
Test #3 was SUCCESSFUL

Test #4: All other players' states remain unchanged. 
----------------------------------------------
Test #4 was SUCCESSFUL

Test #5: None of the kingdom or victory card piles were affected. 
----------------------------------------------
Test #5 was SUCCESSFUL

Test #6: The card on the top of the player's deck pile is now in hand.
----------------------------------------------
Test #6 has FAILED


TEST RESULTS: 5/6 tests passed successfully

File 'dominion.c'
Lines executed:52.30% of 564
Branches executed:60.10% of 411
Taken at least once:45.99% of 411
Calls executed:44.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:19
        -:    0:Programs:19
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 162248616 returned 100% blocks executed 100%
162248616:    8:int compare(const void* a, const void* b) {
162248616:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 12832117 (fallthrough)
branch  1 taken 149416499
 12832117:   10:    return 1;
149416499:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 40721173 (fallthrough)
branch  1 taken 108695326
 40721173:   12:    return -1;
108695326:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 3000023 returned 100% blocks executed 95%
  3000023:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
  3000023:   44:  SelectStream(1);
call    0 returned 3000023
  3000023:   45:  PutSeed((long)randomSeed);
call    0 returned 3000023
        -:   46:  
        -:   47:  //check number of players
  3000023:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 3000023 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 3000023
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
  3000023:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
 33000253:   57:  for (i = 0; i < 10; i++)
branch  0 taken 30000230
branch  1 taken 3000023 (fallthrough)
        -:   58:    {
330002530:   59:      for (j = 0; j < 10; j++)
branch  0 taken 300002300
branch  1 taken 30000230 (fallthrough)
        -:   60:        {
300002300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 270002070 (fallthrough)
branch  1 taken 30000230
branch  2 taken 0 (fallthrough)
branch  3 taken 270002070
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
  3000023:   73:  if (numPlayers == 2)
branch  0 taken 1000433 (fallthrough)
branch  1 taken 1999590
        -:   74:    {
  1000433:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
  1999590:   77:  else if (numPlayers == 3)
branch  0 taken 999435 (fallthrough)
branch  1 taken 1000155
        -:   78:    {
   999435:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
  1000155:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
  3000023:   87:  if (numPlayers == 2)
branch  0 taken 1000433 (fallthrough)
branch  1 taken 1999590
        -:   88:    {
  1000433:   89:      state->supplyCount[estate] = 8;
  1000433:   90:      state->supplyCount[duchy] = 8;
  1000433:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
  1999590:   95:      state->supplyCount[estate] = 12;
  1999590:   96:      state->supplyCount[duchy] = 12;
  1999590:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
  3000023:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
  3000023:  102:  state->supplyCount[silver] = 40;
  3000023:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
 63000483:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 60000460
branch  1 taken 3000023 (fallthrough)
        -:  107:    {
495003795:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 465003565
branch  1 taken 30000230 (fallthrough)
        -:  109:	{
465003565:  110:	  if (kingdomCards[j] == i)
branch  0 taken 30000230 (fallthrough)
branch  1 taken 435003335
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
 30000230:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 28578317 (fallthrough)
branch  1 taken 1421913
branch  2 taken 1421532 (fallthrough)
branch  3 taken 27156785
        -:  114:		{
  5686890:  115:		  if (numPlayers == 2){ 
branch  0 taken 949277 (fallthrough)
branch  1 taken 1894168
   949277:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
  1894168:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
 27156785:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
 30000230:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
435003335:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
 11999814:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8999791
branch  1 taken 3000023 (fallthrough)
        -:  139:    {
  8999791:  140:      state->deckCount[i] = 0;
 35999164:  141:      for (j = 0; j < 3; j++)
branch  0 taken 26999373
branch  1 taken 8999791 (fallthrough)
        -:  142:	{
 26999373:  143:	  state->deck[i][j] = estate;
 26999373:  144:	  state->deckCount[i]++;
        -:  145:	}
 71998328:  146:      for (j = 3; j < 10; j++)
branch  0 taken 62998537
branch  1 taken 8999791 (fallthrough)
        -:  147:	{
 62998537:  148:	  state->deck[i][j] = copper;
 62998537:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
 11999814:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8999791
branch  1 taken 3000023 (fallthrough)
        -:  155:    {
  8999791:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 8999791
branch  1 taken 0 (fallthrough)
branch  2 taken 8999791
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
 11999814:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8999791
branch  1 taken 3000023 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
  8999791:  166:      state->handCount[i] = 0;
  8999791:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 84000644:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 81000621
branch  1 taken 3000023 (fallthrough)
        -:  177:    {
 81000621:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
  3000023:  182:  state->outpostPlayed = 0;
  3000023:  183:  state->phase = 0;
  3000023:  184:  state->numActions = 1;
  3000023:  185:  state->numBuys = 1;
  3000023:  186:  state->playedCardCount = 0;
  3000023:  187:  state->whoseTurn = 0;
  3000023:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
 18000138:  192:  for (it = 0; it < 5; it++){
branch  0 taken 15000115
branch  1 taken 3000023 (fallthrough)
 15000115:  193:    drawCard(state->whoseTurn, state);
call    0 returned 15000115
        -:  194:  }
        -:  195:
  3000023:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 3000023
        -:  197:
  3000023:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 9018007 returned 100% blocks executed 100%
  9018007:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  9018007:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  9018007:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1990 (fallthrough)
branch  1 taken 9016017
     1990:  210:    return -1;
  9016017:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 9016017
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
112136161:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 94104127
branch  1 taken 9016017 (fallthrough)
 94104127:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 94104127
 94104127:  216:    newDeck[newDeckPos] = state->deck[player][card];
 94104127:  217:    newDeckPos++;
653978509:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 559874382
branch  1 taken 94104127 (fallthrough)
559874382:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
 94104127:  221:    state->deckCount[player]--;
        -:  222:  }
103120144:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 94104127
branch  1 taken 9016017 (fallthrough)
 94104127:  224:    state->deck[player][i] = newDeck[i];
 94104127:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
  9016017:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 1 returned 100% blocks executed 100%
        1:  311:int numHandCards(struct gameState *state) {
        1:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 1
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 57 returned 100% blocks executed 100%
       57:  320:int supplyCount(int card, struct gameState *state) {
       57:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 12 returned 100% blocks executed 100%
       12:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       12:  326:  int count = 0;
        -:  327:
       48:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 36
branch  1 taken 12 (fallthrough)
        -:  329:    {
       36:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 6 (fallthrough)
branch  1 taken 30
        -:  331:    }
        -:  332:
       60:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 48
branch  1 taken 12 (fallthrough)
        -:  334:    {
       48:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 8 (fallthrough)
branch  1 taken 40
        -:  336:    }
        -:  337:
       72:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 60
branch  1 taken 12 (fallthrough)
        -:  339:    {
       60:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 10 (fallthrough)
branch  1 taken 50
        -:  341:    }
        -:  342:
       12:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 9999265 returned 100% blocks executed 100%
  9999265:  346:int whoseTurn(struct gameState *state) {
  9999265:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 5 returned 100% blocks executed 100%
        5:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        5:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 5
        -:  354:  
        -:  355:  //Discard hand
       30:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 25
branch  1 taken 5 (fallthrough)
       25:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       25:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        5:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        5:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        4:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        5:  370:  state->outpostPlayed = 0;
        5:  371:  state->phase = 0;
        5:  372:  state->numActions = 1;
        5:  373:  state->coins = 0;
        5:  374:  state->numBuys = 1;
        5:  375:  state->playedCardCount = 0;
        5:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       30:  380:  for (k = 0; k < 5; k++){
branch  0 taken 25
branch  1 taken 5 (fallthrough)
       25:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 25
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        5:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 5
        -:  386:
        5:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 78 returned 100% blocks executed 100%
       78:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       78:  420:  int score = 0;
        -:  421:  //score from hand
      114:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 36
branch  1 taken 78 (fallthrough)
        -:  423:    {
       36:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
       36:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 10 (fallthrough)
branch  1 taken 26
       36:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
       36:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 10 (fallthrough)
branch  1 taken 26
       36:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
       36:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
call    2 returned 4
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
      114:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 36
branch  1 taken 78 (fallthrough)
        -:  434:    {
       36:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
       36:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 10 (fallthrough)
branch  1 taken 26
       36:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
       36:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 10 (fallthrough)
branch  1 taken 26
       36:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
       36:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
call    2 returned 4
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
      114:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 36
branch  1 taken 78 (fallthrough)
        -:  445:    {
       36:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
       36:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 10 (fallthrough)
branch  1 taken 26
       36:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
       36:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10 (fallthrough)
branch  1 taken 26
       36:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
       36:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4 (fallthrough)
branch  1 taken 32
call    2 returned 4
        -:  452:    }
        -:  453:
       78:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 19 returned 100% blocks executed 97%
       19:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
       95:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 76
branch  1 taken 19 (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
       76:  467:      if (i >= state->numPlayers)
branch  0 taken 14 (fallthrough)
branch  1 taken 62
        -:  468:	{
       14:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
       62:  473:	  players[i] = scoreFor (i, state);
call    0 returned 62
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
       19:  478:  j = 0;
       95:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 76
branch  1 taken 19 (fallthrough)
        -:  480:    {
       76:  481:      if (players[i] > players[j])
branch  0 taken 0 (fallthrough)
branch  1 taken 76
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
       19:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
       19:  489:  currentPlayer = whoseTurn(state);
call    0 returned 19
       95:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 76
branch  1 taken 19 (fallthrough)
        -:  491:    {
       76:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 62 (fallthrough)
branch  1 taken 14
branch  2 taken 23 (fallthrough)
branch  3 taken 39
        -:  493:	{
       23:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
       19:  499:  j = 0;
       95:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 76
branch  1 taken 19 (fallthrough)
        -:  501:    {
       76:  502:      if ( players[i] > players[j] )
branch  0 taken 10 (fallthrough)
branch  1 taken 66
        -:  503:	{
       10:  504:	  j = i;
        -:  505:	}
        -:  506:    }
       19:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
       95:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 76
branch  1 taken 19 (fallthrough)
        -:  511:    {
       76:  512:      if ( players[i] == highScore )
branch  0 taken 52 (fallthrough)
branch  1 taken 24
        -:  513:	{
       52:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
       24:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
       19:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 24999380 returned 100% blocks executed 100%
 24999380:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
 24999380:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 16241 (fallthrough)
branch  1 taken 24983139
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  4122458:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 4106217
branch  1 taken 16241 (fallthrough)
  4106217:  534:      state->deck[player][i] = state->discard[player][i];
  4106217:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    16241:  538:    state->deckCount[player] = state->discardCount[player];
    16241:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    16241:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 16241
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    16241:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    16241:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    16241:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    16241:  559:    if (deckCounter == 0)
branch  0 taken 15 (fallthrough)
branch  1 taken 16226
       15:  560:      return -1;
        -:  561:
    16226:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    16226:  563:    state->deckCount[player]--;
    16226:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
 24983139:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
 24983139:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
 24983139:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 24983139:  576:    state->deckCount[player]--;
 24983139:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
 24999365:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 8 returned 100% blocks executed 23%
        8:  583:int getCost(int cardNumber)
        -:  584:{
        8:  585:  switch( cardNumber ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 3
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
branch  8 taken 1
branch  9 taken 0
branch 10 taken 2
branch 11 taken 0
branch 12 taken 1
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/***************************************************************************************************************
        -:  647:* Refactored cardEffect functions
        -:  648:* Use a seed of 10 to test all of these functions
        -:  649:****************************************************************************************************************/
        -:  650:
        -:  651:/***************************************************************************************************************
        -:  652:* Reveal cards from your deck until you reveal 2 Treasure cards. 
        -:  653:* Put those Treasure cards into your hand and discard the other revealed cards.
        -:  654:****************************************************************************************************************/
function playAdventurer called 1000002 returned 100% blocks executed 92%
  1000002:  655:int playAdventurer(struct gameState *state)
        -:  656:{
        -:  657:	//added these ints for refactoring
  1000002:  658:	int drawntreasure = 0;
  1000002:  659:	int currentPlayer = whoseTurn(state);
call    0 returned 1000002
  1000002:  660:	int cardDrawn = 0;
  1000002:  661:	int z = 0;
        -:  662:	int temphand[MAX_HAND];
        -:  663:	
        -:  664:	//loop until play draws 2 treasure cards
        -:  665:	//BUG PLACED HERE: 
        -:  666:	//WAS: while(drawntreasure < 2) 
  5000010:  667:	while(drawntreasure <= 2){
branch  0 taken 3000006
branch  1 taken 1000002 (fallthrough)
        -:  668:		
  3000006:  669:		if (state->deckCount[currentPlayer] < 1) //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1975 (fallthrough)
branch  1 taken 2998031
        -:  670:		{
     1975:  671:			shuffle(currentPlayer, state);
call    0 returned 1975
        -:  672:		}
        -:  673:		
  3000006:  674:		drawCard(currentPlayer, state);
call    0 returned 3000006
  3000006:  675:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  676:		
        -:  677:		//BUG PLACED HERE: 
        -:  678:		//WAS: if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
  3000006:  679:		if (cardDrawn = copper || cardDrawn == silver || cardDrawn == gold)
        -:  680:		{
  3000006:  681:			drawntreasure++;
        -:  682:		}			
        -:  683:		else
        -:  684:		{
        -:  685:			temphand[z]=cardDrawn;
        -:  686:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  687:			z++;
        -:  688:		}
        -:  689:	}
        -:  690:	
  2000004:  691:    while(z-1 >= 0)
branch  0 taken 0
branch  1 taken 1000002 (fallthrough)
        -:  692:	{
    #####:  693:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn
    #####:  694:		z = z-1;
        -:  695:    }
        -:  696:	
        -:  697:	//possible bug: never discards adventurer card
        -:  698:	
  1000002:  699:	return 0;
        -:  700:}
        -:  701:
        -:  702:/***************************************************************************************************************
        -:  703:* +3 Cards
        -:  704:****************************************************************************************************************/
function playSmithy called 2999612 returned 100% blocks executed 100%
  2999612:  705:int playSmithy(struct gameState *state, int handPos)
        -:  706:{
        -:  707:	//added these ints for refactoring
  2999612:  708:	int i = 0;
  2999612:  709:	int currentPlayer = whoseTurn(state);
call    0 returned 2999612
        -:  710:	
        -:  711:	//+3 Cards
        -:  712:	//BUG PLACED HERE: 
        -:  713:	//WAS: for (i = 0; i < 3; i++)
  8998836:  714:    for (i = 1; i < 3; i++)
branch  0 taken 5999224
branch  1 taken 2999612 (fallthrough)
        -:  715:	{
  5999224:  716:		drawCard(currentPlayer, state);
call    0 returned 5999224
        -:  717:	}
        -:  718:			
        -:  719:    //discard card from hand
  2999612:  720:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2999612
  2999612:  721:	return 0;
        -:  722:}
        -:  723:
        -:  724:/***************************************************************************************************************
        -:  725:* You may trash a Treasure from your hand. 
        -:  726:* Gain a Treasure to your hand costing up to 3 coins more than it.
        -:  727:****************************************************************************************************************/
function playMine called 1 returned 100% blocks executed 81%
        1:  728:int playMine(struct gameState *state, int choice1, int choice2, int handPos)
        -:  729:{
        -:  730:	//added these ints for refactoring
        1:  731:	int i = 0;
        1:  732:	int currentPlayer = whoseTurn(state);
call    0 returned 1
        -:  733:
        1:  734:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  735:
        1:  736:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  737:	{
    #####:  738:		return -1;
        -:  739:	}
        -:  740:	
        -:  741:	//Possible pre-existing bug?
        -:  742:	//should be (choice2 > gold || choice2 < copper)
        1:  743:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  744:	{
    #####:  745:		return -1;
        -:  746:	}
        -:  747:	
        1:  748:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  749:	{
    #####:  750:		return -1;
        -:  751:	}
        -:  752:
        1:  753:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 1
        -:  754:
        -:  755:    //discard card from hand
        -:  756:	//BUG PLACED HERE: 
        -:  757:	//WAS: discardCard(handPos, currentPlayer, state, 0);
        1:  758:    discardCard(handPos, currentPlayer, state, 1);
call    0 returned 1
        -:  759:
        -:  760:    //discard trashed card
        1:  761:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 1
branch  1 taken 0 (fallthrough)
        -:  762:	{
        1:  763:		if (state->hand[currentPlayer][i] == j)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  764:	    {
        -:  765:			//possible bug:
        -:  766:			//should be: discardCard(i, currentPlayer, state, 1);
        1:  767:			discardCard(i, currentPlayer, state, 0);			
call    0 returned 1
        1:  768:			break;
        -:  769:	    }
        -:  770:	}
        -:  771:			
        1:  772:    return 0;
        -:  773:}
        -:  774:
        -:  775:/***************************************************************************************************************
        -:  776:* +2 Coins
        -:  777:* Trash this card. Put an Embargo token on top of a Supply pile. 
        -:  778:* When a player buys a card, he gains a Curse card per Embargo token on that pile.
        -:  779:****************************************************************************************************************/
function playEmbargo called 1 returned 100% blocks executed 83%
        1:  780:int playEmbargo(struct gameState *state, int choice1, int handPos)
        -:  781:{
        1:  782:	int currentPlayer = whoseTurn(state);
call    0 returned 1
        -:  783:	
        -:  784:	//+2 Coins
        1:  785:    state->coins = state->coins + 2;
        -:  786:			
        -:  787:    //see if selected pile is in play
        1:  788:    if ( state->supplyCount[choice1] == -1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  789:	{
    #####:  790:		return -1;
        -:  791:	}
        -:  792:			
        -:  793:	//add embargo token to selected supply pile
        1:  794:	state->embargoTokens[choice1]++;
        -:  795:		
        -:  796:	//trash card
        -:  797:	//BUG PLACED HERE:
        -:  798:	//WAS: discardCard(handPos, currentPlayer, state, 1);
        1:  799:	discardCard(handPos, currentPlayer, state, 0);		
call    0 returned 1
        1:  800:	return 0;
        -:  801:}
        -:  802:
        -:  803:/***************************************************************************************************************
        -:  804:* +1 Card
        -:  805:* +2 Actions
        -:  806:****************************************************************************************************************/
function playVillage called 1000004 returned 100% blocks executed 100%
  1000004:  807:int playVillage(struct gameState *state, int handPos)
        -:  808:{
  1000004:  809:	int currentPlayer = whoseTurn(state);
call    0 returned 1000004
        -:  810:	
        -:  811:	//+1 Card
  1000004:  812:	drawCard(currentPlayer, state);
call    0 returned 1000004
        -:  813:
        -:  814:	//+2 Actions
  1000004:  815:	state->numActions = state->numActions + 2;
        -:  816:
        -:  817:	//discard played card from hand
  1000004:  818:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1000004
  1000004:  819:	return 0;
        -:  820:}
        -:  821:
        -:  822:
function cardEffect called 4999619 returned 100% blocks executed 10%
  4999619:  823:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  824:{
        -:  825:  int i;
        -:  826:  int j;
        -:  827:  int k;
        -:  828:  int x;
        -:  829:  int index;
  4999619:  830:  int currentPlayer = whoseTurn(state);
call    0 returned 4999619
  4999619:  831:  int nextPlayer = currentPlayer + 1;
        -:  832:
  4999619:  833:  int tributeRevealedCards[2] = {-1, -1};
        -:  834:  int temphand[MAX_HAND];// moved above the if statement
        -:  835:  
        -:  836:  int cardDrawn;
  4999619:  837:  int z = 0;// this is the counter for the temp hand
  4999619:  838:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 1360704 (fallthrough)
branch  1 taken 3638915
  1360704:  839:    nextPlayer = 0;
        -:  840:  }
        -:  841:  
        -:  842:	
        -:  843:  //uses switch to select card and perform actions
  4999619:  844:  switch( card ) 
branch  0 taken 1000001
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 3
branch  6 taken 2999611
branch  7 taken 1000004
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  845:    {
        -:  846:    case adventurer:
        -:  847:
  1000001:  848:	  return playAdventurer(state);
call    0 returned 1000001
        -:  849:			
        -:  850:    case council_room:
        -:  851:      //+4 Cards
    #####:  852:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  853:	{
    #####:  854:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  855:	}
        -:  856:			
        -:  857:      //+1 Buy
    #####:  858:      state->numBuys++;
        -:  859:			
        -:  860:      //Each other player draws a card
    #####:  861:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  864:	    {
    #####:  865:	      drawCard(i, state);
call    0 never executed
        -:  866:	    }
        -:  867:	}
        -:  868:			
        -:  869:      //put played card in played card pile
    #####:  870:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  871:			
    #####:  872:      return 0;
        -:  873:			
        -:  874:    case feast:
        -:  875:      //gain card with cost up to 5
        -:  876:      //Backup hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  879:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  880:      }
        -:  881:      //Backup hand
        -:  882:
        -:  883:      //Update Coins for Buy
    #####:  884:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  885:      x = 1;//Condition to loop on
    #####:  886:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  887:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  888:	  if (DEBUG)
        -:  889:	    printf("None of that card left, sorry!\n");
        -:  890:
        -:  891:	  if (DEBUG){
        -:  892:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  893:	  }
        -:  894:	}
    #####:  895:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  897:
        -:  898:	  if (DEBUG){
        -:  899:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  900:	  }
        -:  901:	}
        -:  902:	else{
        -:  903:
        -:  904:	  if (DEBUG){
        -:  905:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  906:	  }
        -:  907:
    #####:  908:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  909:	  x = 0;//No more buying cards
        -:  910:
        -:  911:	  if (DEBUG){
        -:  912:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  913:	  }
        -:  914:
        -:  915:	}
        -:  916:      }     
        -:  917:
        -:  918:      //Reset Hand
    #####:  919:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  920:	state->hand[currentPlayer][i] = temphand[i];
    #####:  921:	temphand[i] = -1;
        -:  922:      }
        -:  923:      //Reset Hand
        -:  924:      			
    #####:  925:      return 0;
        -:  926:			
        -:  927:    case gardens:
    #####:  928:      return -1;
        -:  929:			
        -:  930:    case mine:
    #####:  931:		return playMine(state, choice1, choice2, handPos);
call    0 never executed
        -:  932:			
        -:  933:    case remodel:
        3:  934:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  935:
        3:  936:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 3
call    1 returned 3
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        -:  937:	{
        1:  938:	  return -1;
        -:  939:	}
        -:  940:
        2:  941:      gainCard(choice2, state, 0, currentPlayer);
call    0 returned 2
        -:  942:
        -:  943:      //discard card from hand
        2:  944:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2
        -:  945:
        -:  946:      //discard trashed card
        4:  947:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 4
branch  1 taken 0 (fallthrough)
        -:  948:	{
        4:  949:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -:  950:	    {
        2:  951:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 2
        2:  952:	      break;
        -:  953:	    }
        -:  954:	}
        -:  955:
        -:  956:
        2:  957:      return 0;
        -:  958:		
        -:  959:    case smithy:
        -:  960:
  2999611:  961:      return playSmithy(state, handPos);
call    0 returned 2999611
        -:  962:		
        -:  963:    case village:
  1000004:  964:		return playVillage(state, handPos);
call    0 returned 1000004
        -:  965:		
        -:  966:    case baron:
    #####:  967:      state->numBuys++;//Increase buys by 1!
    #####:  968:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  969:	int p = 0;//Iterator for hand!
    #####:  970:	int card_not_discarded = 1;//Flag for discard set!
    #####:  971:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  972:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  973:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  974:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  975:	    state->discardCount[currentPlayer]++;
    #####:  976:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  977:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  978:	    }
    #####:  979:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  980:	    state->handCount[currentPlayer]--;
    #####:  981:	    card_not_discarded = 0;//Exit the loop
        -:  982:	  }
    #####:  983:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  984:	    if(DEBUG) {
        -:  985:	      printf("No estate cards in your hand, invalid choice\n");
        -:  986:	      printf("Must gain an estate if there are any\n");
        -:  987:	    }
    #####:  988:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  989:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  990:	      state->supplyCount[estate]--;//Decrement estates
    #####:  991:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  992:		isGameOver(state);
call    0 never executed
        -:  993:	      }
        -:  994:	    }
    #####:  995:	    card_not_discarded = 0;//Exit the loop
        -:  996:	  }
        -:  997:			    
        -:  998:	  else{
    #####:  999:	    p++;//Next card
        -: 1000:	  }
        -: 1001:	}
        -: 1002:      }
        -: 1003:			    
        -: 1004:      else{
    #####: 1005:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1006:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1007:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1008:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1009:	    isGameOver(state);
call    0 never executed
        -: 1010:	  }
        -: 1011:	}
        -: 1012:      }
        -: 1013:	    
        -: 1014:      
    #####: 1015:      return 0;
        -: 1016:		
        -: 1017:    case great_hall:
        -: 1018:      //+1 Card
    #####: 1019:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1020:			
        -: 1021:      //+1 Actions
    #####: 1022:      state->numActions++;
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case minion:
        -: 1029:      //+1 action
    #####: 1030:      state->numActions++;
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1034:			
    #####: 1035:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1036:	{
    #####: 1037:	  state->coins = state->coins + 2;
        -: 1038:	}
        -: 1039:			
    #####: 1040:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1041:	{
        -: 1042:	  //discard hand
    #####: 1043:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1044:	    {
    #####: 1045:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1046:	    }
        -: 1047:				
        -: 1048:	  //draw 4
    #####: 1049:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1050:	    {
    #####: 1051:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1052:	    }
        -: 1053:				
        -: 1054:	  //other players discard hand and redraw if hand size > 4
    #####: 1055:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:	    {
    #####: 1057:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1058:		{
    #####: 1059:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1060:		    {
        -: 1061:		      //discard hand
    #####: 1062:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1063:			{
    #####: 1064:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1065:			}
        -: 1066:							
        -: 1067:		      //draw 4
    #####: 1068:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1069:			{
    #####: 1070:			  drawCard(i, state);
call    0 never executed
        -: 1071:			}
        -: 1072:		    }
        -: 1073:		}
        -: 1074:	    }
        -: 1075:				
        -: 1076:	}
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case steward:
    #####: 1080:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
        -: 1082:	  //+2 cards
    #####: 1083:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1084:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1085:	}
    #####: 1086:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1087:	{
        -: 1088:	  //+2 coins
    #####: 1089:	  state->coins = state->coins + 2;
        -: 1090:	}
        -: 1091:      else
        -: 1092:	{
        -: 1093:	  //trash 2 cards in hand
    #####: 1094:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1095:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1096:	}
        -: 1097:			
        -: 1098:      //discard card from hand
    #####: 1099:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1100:      return 0;
        -: 1101:		
        -: 1102:    case tribute:
    #####: 1103:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1104:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1105:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1106:	  state->deckCount[nextPlayer]--;
        -: 1107:	}
    #####: 1108:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1109:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1110:	  state->discardCount[nextPlayer]--;
        -: 1111:	}
        -: 1112:	else{
        -: 1113:	  //No Card to Reveal
        -: 1114:	  if (DEBUG){
        -: 1115:	    printf("No cards to reveal\n");
        -: 1116:	  }
        -: 1117:	}
        -: 1118:      }
        -: 1119:	    
        -: 1120:      else{
    #####: 1121:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1122:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1123:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1124:	    state->deckCount[nextPlayer]++;
    #####: 1125:	    state->discard[nextPlayer][i] = -1;
    #####: 1126:	    state->discardCount[nextPlayer]--;
        -: 1127:	  }
        -: 1128:			    
    #####: 1129:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1130:	} 
    #####: 1131:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1132:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1133:	state->deckCount[nextPlayer]--;
    #####: 1134:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1135:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1136:	state->deckCount[nextPlayer]--;
        -: 1137:      }    
        -: 1138:		       
    #####: 1139:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1140:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1141:	state->playedCardCount++;
    #####: 1142:	tributeRevealedCards[1] = -1;
        -: 1143:      }
        -: 1144:
    #####: 1145:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1146:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1147:	  state->coins += 2;
        -: 1148:	}
        -: 1149:		    
    #####: 1150:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1151:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:	}
        -: 1154:	else{//Action Card
    #####: 1155:	  state->numActions = state->numActions + 2;
        -: 1156:	}
        -: 1157:      }
        -: 1158:	    
    #####: 1159:      return 0;
        -: 1160:		
        -: 1161:    case ambassador:
    #####: 1162:      j = 0;		//used to check if player has enough cards to discard
        -: 1163:
    #####: 1164:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1165:	{
    #####: 1166:	  return -1;				
        -: 1167:	}
        -: 1168:
    #####: 1169:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1170:	{
    #####: 1171:	  return -1;
        -: 1172:	}
        -: 1173:
    #####: 1174:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1175:	{
    #####: 1176:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1177:	    {
    #####: 1178:	      j++;
        -: 1179:	    }
        -: 1180:	}
    #####: 1181:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  return -1;				
        -: 1184:	}
        -: 1185:
        -: 1186:      if (DEBUG) 
        -: 1187:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1188:
        -: 1189:      //increase supply count for choosen card by amount being discarded
    #####: 1190:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1191:			
        -: 1192:      //each other player gains a copy of revealed card
    #####: 1193:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1194:	{
    #####: 1195:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1196:	    {
    #####: 1197:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1198:	    }
        -: 1199:	}
        -: 1200:
        -: 1201:      //discard played card from hand
    #####: 1202:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1203:
        -: 1204:      //trash copies of cards returned to supply
    #####: 1205:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
    #####: 1207:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1208:	    {
    #####: 1209:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1210:		{
    #####: 1211:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1212:		  break;
        -: 1213:		}
        -: 1214:	    }
        -: 1215:	}			
        -: 1216:
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case cutpurse:
        -: 1220:
    #####: 1221:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1222:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1225:	    {
    #####: 1226:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1227:		{
    #####: 1228:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1229:		    {
    #####: 1230:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1231:		      break;
        -: 1232:		    }
    #####: 1233:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1234:		    {
    #####: 1235:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1236:			{
        -: 1237:			  if (DEBUG)
        -: 1238:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1239:			}	
    #####: 1240:		      break;
        -: 1241:		    }		
        -: 1242:		}
        -: 1243:					
        -: 1244:	    }
        -: 1245:				
        -: 1246:	}				
        -: 1247:
        -: 1248:      //discard played card from hand
    #####: 1249:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1250:
    #####: 1251:      return 0;
        -: 1252:
        -: 1253:		
        -: 1254:    case embargo: 
    #####: 1255:		return playEmbargo(state, choice1, handPos);
call    0 never executed
        -: 1256:		
        -: 1257:    case outpost:
        -: 1258:      //set outpost flag
    #####: 1259:      state->outpostPlayed++;
        -: 1260:			
        -: 1261:      //discard card
    #####: 1262:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1263:      return 0;
        -: 1264:		
        -: 1265:    case salvager:
        -: 1266:      //+1 buy
    #####: 1267:      state->numBuys++;
        -: 1268:			
    #####: 1269:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1270:	{
        -: 1271:	  //gain coins equal to trashed card
    #####: 1272:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1273:	  //trash card
    #####: 1274:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1275:	}
        -: 1276:			
        -: 1277:      //discard card
    #####: 1278:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1279:      return 0;
        -: 1280:		
        -: 1281:    case sea_hag:
    #####: 1282:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1283:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1284:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1285:	  state->discardCount[i]++;
    #####: 1286:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1287:	}
        -: 1288:      }
    #####: 1289:      return 0;
        -: 1290:		
        -: 1291:    case treasure_map:
        -: 1292:      //search hand for another treasure_map
    #####: 1293:      index = -1;
    #####: 1294:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1295:	{
    #####: 1296:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1297:	    {
    #####: 1298:	      index = i;
    #####: 1299:	      break;
        -: 1300:	    }
        -: 1301:	}
    #####: 1302:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1303:	{
        -: 1304:	  //trash both treasure cards
    #####: 1305:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1306:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1307:
        -: 1308:	  //gain 4 Gold cards
    #####: 1309:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1310:	    {
    #####: 1311:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1312:	    }
        -: 1313:				
        -: 1314:	  //return success
    #####: 1315:	  return 1;
        -: 1316:	}
        -: 1317:			
        -: 1318:      //no second treasure_map found in hand
    #####: 1319:      return -1;
        -: 1320:    }
        -: 1321:	
    #####: 1322:  return -1;
        -: 1323:}
        -: 1324:
function discardCard called 3999625 returned 100% blocks executed 89%
  3999625: 1325:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1326:{
        -: 1327:	
        -: 1328:  //if card is not trashed, added to Played pile 
  3999625: 1329:  if (trashFlag < 1)
branch  0 taken 3999623 (fallthrough)
branch  1 taken 2
        -: 1330:    {
        -: 1331:      //add card to played pile
  3999623: 1332:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
  3999623: 1333:      state->playedCardCount++;
        -: 1334:    }
        -: 1335:	
        -: 1336:  //set played card to -1
  3999625: 1337:  state->hand[currentPlayer][handPos] = -1;
        -: 1338:	
        -: 1339:  //remove card from player's hand
  3999625: 1340:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 2038 (fallthrough)
branch  1 taken 3997587
        -: 1341:    {
        -: 1342:      //reduce number of cards in hand
     2038: 1343:      state->handCount[currentPlayer]--;
        -: 1344:    }
  3997587: 1345:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 3997587
        -: 1346:    {
        -: 1347:      //reduce number of cards in hand
    #####: 1348:      state->handCount[currentPlayer]--;
        -: 1349:    }
        -: 1350:  else 	
        -: 1351:    {
        -: 1352:      //replace discarded card with last card in hand
  3997587: 1353:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1354:      //set last card to -1
  3997587: 1355:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1356:      //reduce number of cards in hand
  3997587: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:	
  3999625: 1360:  return 0;
        -: 1361:}
        -: 1362:
function gainCard called 57 returned 100% blocks executed 100%
       57: 1363:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1364:{
        -: 1365:  //Note: supplyPos is enum of choosen card
        -: 1366:	
        -: 1367:  //check if supply pile is empty (0) or card is not used in game (-1)
       57: 1368:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 57
branch  1 taken 13 (fallthrough)
branch  2 taken 44
        -: 1369:    {
       13: 1370:      return -1;
        -: 1371:    }
        -: 1372:	
        -: 1373:  //added card for [whoseTurn] current player:
        -: 1374:  // toFlag = 0 : add to discard
        -: 1375:  // toFlag = 1 : add to deck
        -: 1376:  // toFlag = 2 : add to hand
        -: 1377:
       44: 1378:  if (toFlag == 1)
branch  0 taken 14 (fallthrough)
branch  1 taken 30
        -: 1379:    {
       14: 1380:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       14: 1381:      state->deckCount[player]++;
        -: 1382:    }
       30: 1383:  else if (toFlag == 2)
branch  0 taken 16 (fallthrough)
branch  1 taken 14
        -: 1384:    {
       16: 1385:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       16: 1386:      state->handCount[player]++;
        -: 1387:    }
        -: 1388:  else
        -: 1389:    {
       14: 1390:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       14: 1391:      state->discardCount[player]++;
        -: 1392:    }
        -: 1393:	
        -: 1394:  //decrease number in supply pile
       44: 1395:  state->supplyCount[supplyPos]--;
        -: 1396:	 
       44: 1397:  return 0;
        -: 1398:}
        -: 1399:
function updateCoins called 3000028 returned 100% blocks executed 82%
  3000028: 1400:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1401:{
        -: 1402:  int i;
        -: 1403:	
        -: 1404:  //reset coin count
  3000028: 1405:  state->coins = 0;
        -: 1406:
        -: 1407:  //add coins for each Treasure card in player's hand
 18000168: 1408:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 15000140
branch  1 taken 3000028 (fallthrough)
        -: 1409:    {
 15000140: 1410:      if (state->hand[player][i] == copper)
branch  0 taken 11686348 (fallthrough)
branch  1 taken 3313792
        -: 1411:	{
 11686348: 1412:	  state->coins += 1;
        -: 1413:	}
  3313792: 1414:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 3313792
        -: 1415:	{
    #####: 1416:	  state->coins += 2;
        -: 1417:	}
  3313792: 1418:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 3313792
        -: 1419:	{
    #####: 1420:	  state->coins += 3;
        -: 1421:	}	
        -: 1422:    }	
        -: 1423:
        -: 1424:  //add bonus
  3000028: 1425:  state->coins += bonus;
        -: 1426:
  3000028: 1427:  return 0;
        -: 1428:}
        -: 1429:
        -: 1430:
        -: 1431://end of dominion.c
        -: 1432:
